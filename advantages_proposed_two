The proposed solution provides a number of considerable advantages over the
current system. First and foremost, it guards the data against corruption.
With the current system, a particular file can remain in the memory for too
long, while the proposed system forces the NFS client to flush it's caches
when a limit is reached. That is, a file won't remain in the cache for long,
making sure it gets written to the server and to the proposed buffer,
reducing the risk of data corruption.

The current client side asynchronous mode tries to fill up the RAM before
trying to transfer the contents to the buffer. This can negatively affect
the performance of both the applications running on the client and the
network. If a particularly heavy application needs to be loaded, the client 
is forced to flush the caches, thus initiaing the NFS write. The client
will need to wait for the write to complete before the application can be
properly loaded. This introduces unnecessary latency to the system. The 
proposed system also makes sure that the server's capacity is not wasted.
The system makes sure a healthy number of clients get to write to the server
throughout its running time.

Regardless of the number of active clients, the number of clients doing
write to the server will remain a constant. This can improve the overall 
performance of the environment by ensuring that the server can provide 
decent read/write speeds regardless of the state of the environment. Thus
the proposed system can provide a swift and mature NFS behaviour.

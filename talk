good afternoon friends

I am going to present my paper titled "Enhancing the Performance and Reliability
of Network File System".

With this paper, we are trying to introduce a number of methods for increasing
the general performance and reducing chances of data correction with the Network
File System.

NFS is a generic term, it can refer to any network protocol which allows
accessing files on a remote disk. But today, we are talking about SUN's NFS,
which was first introduced way back in 1985.

NFS allows us to mount the partitions on a remote computer, and use them as if
they were part of the local machine.

It is still being actively developed, and is widely deployed across 
organizations, often with a directory access protocol such as LDAP.

This allows people to log into their user accounts and access their files from
any machine on the network.

One such system is operational in Department of Computer Applications, College
of Engineering, Trivandrum.

The issue with NFS is, in its default configuration, it is notoriously slow.

In our lab, this means countless man hours are lost just trying to use the
system.

Our research began as a way to find means to improve the speed of the system

Now, NFS has a client-server architecture and at both the client and server end
there are lot of options that can be tweaked.

We began by setting up a virtual lab on our workstation with one virtual
machine running as the NFS server and the rest as clients.

Each of the NFS instances was running in the default configuration, as we
wanted to create a base benchmark score.

For measuring the performance, a number of benchmarking tools including DBench,
Bonnie++, Phoronix Test Suite were used as no single tool could not provide
dependable measurements.

In the default configuration, NFS returned a very disappointing 0.94 MB/s

We started tweaking the settings, at the server side first, changing each
parameter, then trying combination of parameters.

Nothing seemed to improve the performance until we switched the Server side
asynchronous mode on.

The next benchmark showed us that NFS could now perform at 28.90 MB/s.

We knew that the ASYNC mode could provide a performance boost, but had not
expected it to perform this well.

When ASYNC is turned off and the client wants to write a bumch of files, it
transfers the content of each file to the server and waits for the
acknowledgment message from the server.

The server returns the acknowledgment only after it finishes writing the data
completely.

The client does not transfer the next file until it receives acknowledgment.

This is the root cause for the disappointing performance of NFS in it's
default configuration.

Turning on ASYNC means that the client receives the acknowledgment as soon as
it finishes transferring the data, speeding things up considerably.

But if ASYNC is such a useful option, why is turned off by default?

It turns out, leaving the ASYNC mode on is fairly risky.

It causes the NFS server to accept more connections in unit time and the write
queue at the server side starts filling up.
